
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is CharacterIterator abstract:

const UTF8 = 0
const ASCII = 1
const UCS2 = 2
var encoding = 0
var current protected = 0 as long
var currentSize = 0
var ended = false

func copyTo(o as this)
{
	o.encoding = encoding
	o.current = current
	o.currentSize = currentSize
	o.ended = ended
}

func moveToPreviousByte virtual as bool:
	return false

func moveToNextByte virtual as bool:
	return false

func getCurrentByte virtual as int:
	return 0

func setEncoding(ee as string) as this
{
	if String.equalsIgnoreCase(ee, "UTF8") || String.equalsIgnoreCase(ee, "UTF-8") {
		encoding = UTF8
		currentSize = 1
		return this
	}
	if String.equalsIgnoreCase(ee, "ASCII") {
		encoding = ASCII
		currentSize = 1
		return this
	}
	if String.equalsIgnoreCase(ee, "UCS2") || String.equalsIgnoreCase(ee, "UCS-2") {
		encoding = UCS2
		currentSize = 2
		return this
	}
	return null
}

func moveToPreviousChar as bool:
	return moveToPreviousCharacter()

func moveToPreviousCharacter as bool
{
	var cs = currentSize
	if cs > 1 {
		var n as int
		for(n=0; n<cs-1; n++):
			assert moveToPreviousByte()
	}
	var v = doMoveToPreviousCharacter()
	if v == false && cs > 1 {
		var n as int
		for(n=0; n<cs-1; n++):
			moveToNextByte()
	}
	if v && ended:
		ended = false
	return v
}

func doMoveToPreviousCharacter as bool
{
	if encoding == UTF8 {
		assert moveToPreviousByte()
		var c2 = getCurrentByte() as long
		if c2 <= 0x7F {
			current = c2 as long
			currentSize = 1
			return true
		}
		assert moveToPreviousByte()
		var c1 = getCurrentByte() as long
		if((c1 & 0xC0) == 0xC0) {
			assert moveToNextByte()
			var v = ((c1 & 0x1F) << 6) as long
			v += (c2 & 0x3F) as long
			current = v
			currentSize = 2
			return true
		}
		assert moveToPreviousByte()
		var c0 = getCurrentByte() as long
		if((c0 & 0xE0) == 0xE0) {
			assert moveToNextByte()
			assert moveToNextByte()
			var v = ((c0 & 0x0F) << 12) as long
			v += ((c1 & 0x3F) << 6) as long
			v += (c2 & 0x3F) as long
			current = v
			currentSize = 3
			return true
		}
		assert moveToPreviousByte()
		var cm1 = getCurrentByte() as long
		if((cm1 & 0xF0) == 0xF0) {
			assert moveToNextByte()
			assert moveToNextByte()
			assert moveToNextByte()
			var v = ((cm1 & 0x07) << 18) as long
			v += ((c0 & 0x3F) << 12) as long
			v += ((c1 & 0x3F) << 6) as long
			v += (c2 & 0x3F) as long
			current = v
			currentSize = 4
			return true
		}
		moveToNextByte()
		moveToNextByte()
		moveToNextByte()
		moveToNextByte()
		return false
	}
	if encoding == ASCII {
		assert moveToPreviousByte()
		current = getCurrentByte() as long
		return true
	}
	if encoding == UCS2 {
		assert moveToPreviousByte()
		var c1 = getCurrentByte() as long
		assert moveToPreviousByte()
		var c0 = getCurrentByte() as long
		assert moveToNextByte()
		current = (c0 << 8 & c1) as long
		return true
	}
	PRINT "Unsupported encoding in CharacterDecoder: " .. String.forInteger(encoding)
	return false
}

func moveToNextChar as bool:
	return moveToNextCharacter()

func moveToNextCharacter as bool
{
	var v = doMoveToNextCharacter()
	if v == false {
		current = 0 as long
		ended = true
	}
	return v
}

func doMoveToNextCharacter as bool
{
	if encoding == UTF8 {
		assert moveToNextByte()
		var b1 = getCurrentByte()
		var v = -1
		if((b1 & 0xF0) == 0xF0) { // 4 bytes
			v = ((b1 & 0x07) << 18) as long
			assert moveToNextByte()
			var b2 = getCurrentByte()
			v += ((b2 & 0x3F) << 12) as long
			assert moveToNextByte()
			var b3 = getCurrentByte()
			v += ((b3 & 0x3F) << 6) as long
			assert moveToNextByte()
			var b4 = getCurrentByte()
			v += (b4 & 0x3F) as long
			currentSize = 4
		}
		else if((b1 & 0xE0) == 0xE0) { // 3 bytes
			v = ((b1 & 0x0F) << 12) as long
			assert moveToNextByte()
			var b2 = getCurrentByte()
			v += ((b2 & 0x3F) << 6) as long
			assert moveToNextByte()
			var b3 = getCurrentByte()
			v += (b3 & 0x3F) as long
			currentSize = 3
		}
		else if((b1 & 0xC0) == 0xC0) { // 2 bytes
			v = ((b1 & 0x1F) << 6) as long
			assert moveToNextByte()
			var b2 = getCurrentByte()
			v += (b2 & 0x3F) as long
			currentSize = 2
		}
		else if b1 <= 0x7F { // 1 byte
			v = b1 as long
			currentSize = 1
		}
		else { // invalid byte
			return false
		}
		current = v
		return true
	}
	if encoding == ASCII {
		assert moveToNextByte()
		current = getCurrentByte() as long
		return true
	}
	if encoding == UCS2 {
		assert moveToNextByte()
		var c0 = getCurrentByte() as long
		assert moveToNextByte()
		var c1 = getCurrentByte() as long
		current = (c0 << 8 & c1) as long
		return true
	}
	PRINT "Unsupported encoding in CharacterDecoder: " .. String.forInteger(encoding)
	return false
}

func getCurrentCharacter as long:
	return current

func getNextCharacter as long
{
	if moveToNextCharacter() == false:
		return 0 as long
	return current
}

func getCurrentChar as char:
	return current as char

func getNextChar as char
{
	if moveToNextCharacter() == false:
		return 0 as char
	return current as char
}

func hasEnded as bool:
	return ended

func getCurrentPosition abstract as int
func setCurrentPosition(position as int) abstract
